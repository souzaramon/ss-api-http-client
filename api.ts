/* tslint:disable */
/* eslint-disable */
/**
 * SS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthorsAuthor
 */
export interface AuthorsAuthor {
    /**
     * 
     * @type {string}
     * @memberof AuthorsAuthor
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorsAuthor
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorsAuthor
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface AuthorsCreateAuthorDto
 */
export interface AuthorsCreateAuthorDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorsCreateAuthorDto
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorsCreateAuthorDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AuthorsUpdateAuthorDto
 */
export interface AuthorsUpdateAuthorDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorsUpdateAuthorDto
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorsUpdateAuthorDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TitlesCreateTitleDto
 */
export interface TitlesCreateTitleDto {
    /**
     * 
     * @type {string}
     * @memberof TitlesCreateTitleDto
     */
    'id_author'?: string;
    /**
     * 
     * @type {string}
     * @memberof TitlesCreateTitleDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TitlesTitle
 */
export interface TitlesTitle {
    /**
     * 
     * @type {string}
     * @memberof TitlesTitle
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TitlesTitle
     */
    'id_author'?: string;
    /**
     * 
     * @type {string}
     * @memberof TitlesTitle
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TitlesUpdateTitleDto
 */
export interface TitlesUpdateTitleDto {
    /**
     * 
     * @type {string}
     * @memberof TitlesUpdateTitleDto
     */
    'id_author'?: string;
    /**
     * 
     * @type {string}
     * @memberof TitlesUpdateTitleDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UtilApiError
 */
export interface UtilApiError {
    /**
     * 
     * @type {string}
     * @memberof UtilApiError
     */
    'message'?: string;
}

/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new author
         * @summary Create author
         * @param {AuthorsCreateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthor: async (data: AuthorsCreateAuthorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createAuthor', 'data', data)
            const localVarPath = `/authors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing author by ID
         * @summary Delete author
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAuthorById', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all authors
         * @summary List all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single author by their ID
         * @summary Get author by ID
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAuthorById', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing author by ID
         * @summary Update author
         * @param {string} id Author ID
         * @param {AuthorsUpdateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthorById: async (id: string, data: AuthorsUpdateAuthorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAuthorById', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateAuthorById', 'data', data)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new author
         * @summary Create author
         * @param {AuthorsCreateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthor(data: AuthorsCreateAuthorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorsAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthor(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.createAuthor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an existing author by ID
         * @summary Delete author
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.deleteAuthorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all authors
         * @summary List all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAuthors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorsAuthor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAuthors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.getAllAuthors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a single author by their ID
         * @summary Get author by ID
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorsAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.getAuthorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing author by ID
         * @summary Update author
         * @param {string} id Author ID
         * @param {AuthorsUpdateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthorById(id: string, data: AuthorsUpdateAuthorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorsAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthorById(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.updateAuthorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * Create a new author
         * @summary Create author
         * @param {AuthorsCreateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthor(data: AuthorsCreateAuthorDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthorsAuthor> {
            return localVarFp.createAuthor(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing author by ID
         * @summary Delete author
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAuthorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all authors
         * @summary List all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthors(options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorsAuthor>> {
            return localVarFp.getAllAuthors(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single author by their ID
         * @summary Get author by ID
         * @param {string} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AuthorsAuthor> {
            return localVarFp.getAuthorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing author by ID
         * @summary Update author
         * @param {string} id Author ID
         * @param {AuthorsUpdateAuthorDto} data Author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthorById(id: string, data: AuthorsUpdateAuthorDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthorsAuthor> {
            return localVarFp.updateAuthorById(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * Create a new author
     * @summary Create author
     * @param {AuthorsCreateAuthorDto} data Author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createAuthor(data: AuthorsCreateAuthorDto, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).createAuthor(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing author by ID
     * @summary Delete author
     * @param {string} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public deleteAuthorById(id: string, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).deleteAuthorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all authors
     * @summary List all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAllAuthors(options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).getAllAuthors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single author by their ID
     * @summary Get author by ID
     * @param {string} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAuthorById(id: string, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).getAuthorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing author by ID
     * @summary Update author
     * @param {string} id Author ID
     * @param {AuthorsUpdateAuthorDto} data Author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public updateAuthorById(id: string, data: AuthorsUpdateAuthorDto, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).updateAuthorById(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TitlesApi - axios parameter creator
 * @export
 */
export const TitlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new title
         * @summary Create title
         * @param {TitlesCreateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTitle: async (data: TitlesCreateTitleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createTitle', 'data', data)
            const localVarPath = `/titles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing title by ID
         * @summary Delete title
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTitleById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTitleById', 'id', id)
            const localVarPath = `/titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all titles
         * @summary List all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTitles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/titles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single title by their ID
         * @summary Get title by ID
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTitleById', 'id', id)
            const localVarPath = `/titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing title by ID
         * @summary Update title
         * @param {string} id Title ID
         * @param {TitlesUpdateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitleById: async (id: string, data: TitlesUpdateTitleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTitleById', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateTitleById', 'data', data)
            const localVarPath = `/titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitlesApi - functional programming interface
 * @export
 */
export const TitlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TitlesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new title
         * @summary Create title
         * @param {TitlesCreateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTitle(data: TitlesCreateTitleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitlesTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTitle(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitlesApi.createTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an existing title by ID
         * @summary Delete title
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTitleById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTitleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitlesApi.deleteTitleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all titles
         * @summary List all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTitles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TitlesTitle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTitles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitlesApi.getAllTitles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a single title by their ID
         * @summary Get title by ID
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitleById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitlesTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitlesApi.getTitleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing title by ID
         * @summary Update title
         * @param {string} id Title ID
         * @param {TitlesUpdateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTitleById(id: string, data: TitlesUpdateTitleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitlesTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTitleById(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitlesApi.updateTitleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TitlesApi - factory interface
 * @export
 */
export const TitlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TitlesApiFp(configuration)
    return {
        /**
         * Create a new title
         * @summary Create title
         * @param {TitlesCreateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTitle(data: TitlesCreateTitleDto, options?: RawAxiosRequestConfig): AxiosPromise<TitlesTitle> {
            return localVarFp.createTitle(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing title by ID
         * @summary Delete title
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTitleById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTitleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all titles
         * @summary List all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTitles(options?: RawAxiosRequestConfig): AxiosPromise<Array<TitlesTitle>> {
            return localVarFp.getAllTitles(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single title by their ID
         * @summary Get title by ID
         * @param {string} id Title ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TitlesTitle> {
            return localVarFp.getTitleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing title by ID
         * @summary Update title
         * @param {string} id Title ID
         * @param {TitlesUpdateTitleDto} data Title data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitleById(id: string, data: TitlesUpdateTitleDto, options?: RawAxiosRequestConfig): AxiosPromise<TitlesTitle> {
            return localVarFp.updateTitleById(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TitlesApi - object-oriented interface
 * @export
 * @class TitlesApi
 * @extends {BaseAPI}
 */
export class TitlesApi extends BaseAPI {
    /**
     * Create a new title
     * @summary Create title
     * @param {TitlesCreateTitleDto} data Title data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApi
     */
    public createTitle(data: TitlesCreateTitleDto, options?: RawAxiosRequestConfig) {
        return TitlesApiFp(this.configuration).createTitle(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing title by ID
     * @summary Delete title
     * @param {string} id Title ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApi
     */
    public deleteTitleById(id: string, options?: RawAxiosRequestConfig) {
        return TitlesApiFp(this.configuration).deleteTitleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all titles
     * @summary List all titles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApi
     */
    public getAllTitles(options?: RawAxiosRequestConfig) {
        return TitlesApiFp(this.configuration).getAllTitles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single title by their ID
     * @summary Get title by ID
     * @param {string} id Title ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApi
     */
    public getTitleById(id: string, options?: RawAxiosRequestConfig) {
        return TitlesApiFp(this.configuration).getTitleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing title by ID
     * @summary Update title
     * @param {string} id Title ID
     * @param {TitlesUpdateTitleDto} data Title data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApi
     */
    public updateTitleById(id: string, data: TitlesUpdateTitleDto, options?: RawAxiosRequestConfig) {
        return TitlesApiFp(this.configuration).updateTitleById(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



